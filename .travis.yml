
# On your fork, you can configure build logs to be written to an
# AWS S3 bucket by making sure the following variables have been
# set in your Travis CI repository settings page:
#
# - AWS_ACCESS_KEY_ID (display value in build log: No)
# - AWS_SECRET_ACCESS_KEY (display value in build log: No)
# - AWS_DEFAULT_REGION (display value in build log: Yes)
# - LSMB_AWS_UPLOAD_BUCKET (display value in build log: Yes)
#
# AWS_DEFAULT_REGION should be the region hosting your S3 bucket
# LSMB_AWS_UPLOAD_BUCKET should contain the name of the bucket to upload into


dist: trusty
language: perl

notifications:
  webhooks: https://ledgersmb.org/webhook/travis_ci_notifications

env:
  global:
    - RELEASE_TESTING=1
    - PGUSER=postgres
    - PGPASSWORD=test
    - LSMB_TEST_DB=1
    - LSMB_NEW_DB=lsmbinstalltest
    - LSMB_BASE_URL="http://127.0.0.1:5000"
    - PSGI_BASE_URL="http://127.0.0.1:5001"
    - HARNESS_RULESFILE="t/testrules.yml"
    - PATH=$HOME/travis_phantomjs/phantomjs-2.1.1-linux-x86_64/bin:$PATH
    - PATH="$HOME/locallib/bin:$PATH"
    - PERL_LOCAL_LIB_ROOT="$HOME/locallib${PERL_LOCAL_LIB_ROOT+:}$PERL_LOCAL_LIB_ROOT"
    - PERL5LIB="$HOME/locallib/lib/perl5${PERL5LIB+:}$PERL5LIB"
    - PERL_MM_OPT="INSTALL_BASE=$HOME/locallib"
    - PERL_MB_OPT="--install_base=$HOME/locallib"
    - QT_QPA_PLATFORM=phantom
    - DEVEL_COVER_OPTIONS="+ignore,\"\.lttc\$\""

addons:
  apt:
    packages: &default_packages
      - python-pip
      - nginx
      - texlive-latex-recommended
      - texlive-xetex

matrix:
  include:
    - perl: '5.28'
      addons:
        postgresql: '9.6'
        apt:
          packages:
            - *default_packages
            - postgresql-9.6-pgtap
      env:
    - perl: '5.26'
      addons:
        postgresql: '9.6'
        apt:
          packages:
            - *default_packages
            - postgresql-9.6-pgtap
      env:
    - perl: '5.24'
      addons:
        postgresql: '9.6'
        apt:
          packages:
            - *default_packages
            - postgresql-9.6-pgtap
      env:
        - DOJO_BUILT=0
    - perl: '5.22'
      addons:
        postgresql: "9.6"
        apt:
          packages:
            - *default_packages
            - postgresql-9.6-pgtap
      env:
        - COVERAGE=1
    - perl: '5.20'
      addons:
        postgresql: "9.6"
        apt:
          packages:
            - *default_packages
            - postgresql-9.6-pgtap
      env:
        - COA_TESTING=1
    - perl: '5.18'
      addons:
        postgresql: "9.6"
        apt:
          packages:
            - *default_packages
            - postgresql-9.6-pgtap
      env:
        - DB_TESTING=1

before_cache:
  - mkdir -p $HOME/dojo_archive

cache:
  directories:
    - $HOME/locallib
    - $HOME/dojo_archive

before_install:
  # list all the running services before we start. Perhaps we can stop some of them to save resources.
  - service --status-all
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t
  - git clone git://github.com/travis-perl/helpers ~/travis-perl-helpers
  - source ~/travis-perl-helpers/init
  - build-perl 2>/dev/null
  - perl -V
  - npm install uglify-js@">=2.0 <3.0"
  - pip install awscli --upgrade --user

install:
  # Suppress warnings in Perl 5.28 about Locale::* being moved out of 'core'
  # Further more is there a warning regarding redifinition of JSON::PP::Boolean
  # which is fixed in 4.03 (so, reinstall, in order to get to newest)
  - cpanm --reinstall --notest Locale::Country Locale::Codes Locale::Language JSON::PP
  - cpanm Cpanel::JSON::XS~3.0206
  - cpanm --quiet --notest --installdeps --with-develop --with-feature=edi --with-feature=latex-pdf-ps --with-feature=openoffice  --with-feature=starman --with-feature=xls .
  - cpan-install --coverage

before_script:
  - make dist DIST_VER=travis DIST_DIR=${HOME}/built-dist/tar-output
  - cd ${HOME}/built-dist
  - tar xzf tar-output/ledgersmb-travis.tar.gz
  - cd ledgersmb
  - cp doc/conf/ledgersmb.conf.default ledgersmb.conf
  - cp t/.proverc ./
  - coverage-setup
  - sed -e "s#{ROOT}#$PWD#" doc/conf/nginx-travis.conf >/tmp/nginx.conf
  - ((phantomjs --webdriver=4422 2>/dev/null >/dev/null &) && echo "PhantomJS started succesfully") || (echo "Failed to start PhantomJS!" ; exit 1)
  - PERL5OPT="$PERL5OPT $HARNESS_PERL_SWITCHES" plackup -Ilib -Iold/lib --port 5001 --server HTTP::Server::PSGI bin/ledgersmb-server.psgi --access-log /tmp/plackup-access.log 2> /tmp/plackup-error.log &
  - utils/test/Is_LSMB_running.sh --early # fail early if starman is not running (can be skipped based on reponame or owner by setting an array in the script)
  - nginx -c /tmp/nginx.conf
  - if [ "${DOJO_BUILT}" != "" ]; then sed -i -E -e "s/^#?dojo_built *= *[0-9]+/dojo_built=${DOJO_BUILT}/" ledgersmb.conf ; fi
  - if [ "${DOJO_BUILT}" == "0" ]; then rm -rf UI/js; fi
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t
  - |
    mkdir screens
    sed -i -e 's/post-step: 0/post-step: 1/' t/.pherkin.yaml
    sed -i -e 's/# logging_dir:/logging_dir:/' t/.pherkin.yaml

script:
  - prove --jobs $(test-jobs) --recurse
          --pgtap-option dbname=lsmbinstalltest
          --pgtap-option username=postgres
          --feature-option tags=~@wip
          t/ xt/

after_script:
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t
  - |
    if [ -n "$AWS_ACCESS_KEY_ID" ];
    then
       (cd "$HOME/built-dist/ledgersmb/screens"
        aws_url="s3://$LSMB_AWS_UPLOAD_BUCKET/$TRAVIS_REPO_SLUG/$TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER"
        aws s3 cp --recursive --acl public-read ./ "$aws_url/screens"
        aws s3 cp --acl public-read /var/log/dmesg "$aws_url/logs/dmesg"
        aws s3 cp --acl public-read /tmp/plackup-access.log "$aws_url/logs/plackup-access.log"
        aws s3 cp --acl public-read /tmp/plackup-error.log "$aws_url/logs/plackup-error.log" )
    fi

after_success:
  - |
    if [ "$COVERAGE" == "1" ] ; then
       curl http://localhost:5001/stop.pl ;
       while [ -n "$(jobs -r | grep ledgersmb-server.psgi)" ] ; do sleep 1; echo -n "." ; done ;
       echo "" ;
    fi
  - coverage-report
  # try and force the github camo.githubusercontent.com cache to refresh our badges
  # with no arguments, this only refreshes the badge assests linked to by the default page shown when visiting
  # https://github.com/ledgersmb/LedgerSMB
  # if we want to refresh assets other than those (ie: not master branch) then we will need to add explicit arguments to do so
  # the script is sourced from https://github.com/sbts/github-badge-cache-buster but isn't expected to change so there is no point making it a submodule
  - utils/test/github-badge-cache-buster.sh

after_failure:
  - |
    if [ -z "$AWS_ACCESS_KEY_ID" ]
    then
      echo ===============================
      echo === dmesg                   ===
      echo ===============================
      cat /var/log/dmesg
      # display the dmesg log. may give some hints about system related failures. eg: has the OOM killer triggered
      echo ===============================
      echo === /tmp/plackup-access.log ===
      echo ===============================
      cat /tmp/plackup-access.log
      echo
      echo ===============================
      echo === /tmp/plackup-error.log ===
      echo ===============================
      cat /tmp/plackup-error.log
      echo
    fi
 
