# run on GCE build as per suggested:
# https://github.com/travis-ci/travis-ci/issues/3251#issuecomment-219675294
sudo: false
dist: trusty
language: perl

notifications:
  webhooks: https://ledgersmb.org/webhook/travis_ci_notifications


matrix:
  include:
    - perl: '5.26'
      addons:
        postgresql: '9.6'
        apt:
          packages:
            - nginx postgresql-9.6-pgtap
            - texlive-latex-recommended
            - texlive-xetex
      env:
    - perl: '5.24'
      addons:
        postgresql: '9.5'
        apt:
          packages:
            - nginx postgresql-9.5-pgtap
            - texlive-latex-recommended
            - texlive-xetex
      env:
        - DOJO_BUILT=0
    - perl: '5.22'
      addons:
        postgresql: "9.4"
        apt:
          packages:
             - nginx postgresql-9.4-pgtap
             - texlive-latex-recommended
             - texlive-xetex
      env:
        - COVERAGE=1
    - perl: '5.20'
      addons:
        postgresql: "9.4"
        apt:
          packages:
            - nginx postgresql-9.4-pgtap
            - texlive-latex-recommended
            - texlive-xetex
      env:
        - COA_TESTING=1
    - perl: '5.18'
      addons:
        postgresql: "9.3"
        apt:
          packages:
            - nginx postgresql-9.3-pgtap
            - texlive-latex-recommended
            - texlive-xetex
      env:
        - DB_TESTING=1

before_cache:
  - mkdir -p $HOME/dojo_archive

cache:
  directories:
    - $HOME/locallib
    - $HOME/travis_phantomjs
    - $HOME/dojo_archive

before_install:
  # list all the running services before we start. Perhaps we can stop some of them to save resources.
  - service --status-all
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t
  - phantomjs --version
  - export PATH=$HOME/travis_phantomjs/phantomjs-2.1.1-linux-x86_64/bin:$PATH
  - phantomjs --version
  - if [ $(phantomjs --version) != '2.1.1' ];
    then
      rm -rf $HOME/travis_phantomjs ;
      mkdir -p $HOME/travis_phantomjs ;
      wget https://efficito.com/phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2 -O $HOME/travis_phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2 ;
      tar -xvf $HOME/travis_phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2 -C $HOME/travis_phantomjs ;
      hash -r ;
      export QT_QPA_PLATFORM=phantom
      phantomjs --version ;
    fi
  - git clone git://github.com/travis-perl/helpers ~/travis-perl-helpers
  - source ~/travis-perl-helpers/init
  - build-perl 2>/dev/null
  - perl -V
  - export PERL_LOCAL_LIB_ROOT="$HOME/locallib${PERL_LOCAL_LIB_ROOT+:}$PERL_LOCAL_LIB_ROOT"
  - export PERL5LIB="$HOME/locallib/lib/perl5${PERL5LIB+:}$PERL5LIB"
  - export PATH="$HOME/locallib/bin:$PATH"
  - export PERL_MM_OPT="INSTALL_BASE=$HOME/locallib"
  - export PERL_MB_OPT="--install_base=$HOME/locallib"
  - npm install uglify-js@">=2.0 <3.0"

install:
  - cpanm --quiet --notest --installdeps --with-develop --with-feature=edi --with-feature=latex-pdf-ps --with-feature=openoffice  --with-feature=starman --with-feature=xls .
  - cpan-install --coverage

before_script:
  - make dist DIST_VER=travis DIST_DIR=${HOME}/built-dist/tar-output
  - cd ${HOME}/built-dist
  - tar xzf tar-output/ledgersmb-travis.tar.gz
  - cd ledgersmb
  - cp doc/conf/ledgersmb.conf.default ledgersmb.conf
  - cp t/.proverc ./
  - coverage-setup
  - export DEVEL_COVER_OPTIONS=+ignore,"\.lttc\$"
  - sed -e "s#{ROOT}#$PWD#" doc/conf/nginx-travis.conf >/tmp/nginx.conf
  - ((phantomjs --webdriver=4422 2>/dev/null >/dev/null &) && echo "PhantomJS started succesfully") || (echo "Failed to start PhantomJS!" ; exit 1)
  - PERL5OPT="$PERL5OPT $HARNESS_PERL_SWITCHES" plackup -Ilib -Iold/lib --port 5001 --server HTTP::Server::PSGI bin/ledgersmb-server.psgi --access_log /tmp/plackup-access.log 2> /tmp/plackup-error.log &
  - utils/test/Is_LSMB_running.sh --early # fail early if starman is not running (can be skipped based on reponame or owner by setting an array in the script)
  - nginx -c /tmp/nginx.conf
  - if [ "${DOJO_BUILT}" != "" ]; then sed -i -e "s#dojo_built *= *(\d)+#dojo_built={dojo_built}#" ledgersmb.conf ; fi
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t

script:
  - RELEASE_TESTING=1
     PGUSER=postgres PGPASSWORD=test
     LSMB_TEST_DB=1 LSMB_NEW_DB=lsmbinstalltest
     LSMB_BASE_URL="http://127.0.0.1:5000"
     PSGI_BASE_URL="http://127.0.0.1:5001"
     HARNESS_RULESFILE="t/testrules.yml"
    prove --jobs $(test-jobs) --recurse
          --pgtap-option dbname=lsmbinstalltest
          --pgtap-option username=postgres
          --feature-option tags=~@wip
          t/ xt/

after_success:
  - >
    if [ "$COVERAGE" == "1" ] ; then
       curl http://localhost:5001/stop.pl ;
       while [ -n "$(jobs -r | grep ledgersmb-server.psgi)" ] ; do sleep 1; echo -n "." ; done ;
       echo "" ;
    fi
  - coverage-report
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t
  # try and force the github camo.githubusercontent.com cache to refresh our badges
  # with no arguments, this only refreshes the badge assests linked to by the default page shown when visiting
  # https://github.com/ledgersmb/LedgerSMB
  # if we want to refresh assets other than those (ie: not master branch) then we will need to add explicit arguments to do so
  # the script is sourced from https://github.com/sbts/github-badge-cache-buster but isn't expected to change so there is no point making it a submodule
  - utils/test/github-badge-cache-buster.sh

after_failure:
  # display the available resources
  - utils/diagnostics/t/01-system-resources.t
  - echo ===============================
  - echo === dmesg                   ===
  - echo ===============================
  - cat /var/log/dmesg
  # display the dmesg log. may give some hints about system related failures. eg: has the OOM killer triggered
  - echo ===============================
  - echo === /tmp/plackup-access.log ===
  - echo ===============================
  - cat /tmp/plackup-access.log
  - echo
  - echo ===============================
  - echo === /tmp/plackup-error.log ===
  - echo ===============================
  - cat /tmp/plackup-error.log
  - echo
