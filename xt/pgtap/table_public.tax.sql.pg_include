CREATE OR REPLACE FUNCTION lsmb_pgtap._table_public_tax()
RETURNS SETOF TEXT AS $$
BEGIN


RETURN NEXT has_table(
    'public', 'tax',
    'Should have table public.tax'
);

RETURN NEXT has_pk(
    'public', 'tax',
    'Table public.tax should have a primary key'
);

RETURN NEXT columns_are('public'::name, 'tax'::name, ARRAY[
    'chart_id'::name,
    'rate'::name,
    'minvalue'::name,
    'maxvalue'::name,
    'taxnumber'::name,
    'validto'::name,
    'pass'::name,
    'taxmodule_id'::name
]);

RETURN NEXT has_column(       'public', 'tax', 'chart_id', 'Column public.tax.chart_id should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'chart_id', 'integer', 'Column public.tax.chart_id should be type integer');
RETURN NEXT col_not_null(     'public', 'tax', 'chart_id', 'Column public.tax.chart_id should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'tax', 'chart_id', 'Column public.tax.chart_id should not have a default');

RETURN NEXT has_column(       'public', 'tax', 'rate', 'Column public.tax.rate should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'rate', 'numeric', 'Column public.tax.rate should be type numeric');
RETURN NEXT col_is_null(      'public', 'tax', 'rate', 'Column public.tax.rate should allow NULL');
RETURN NEXT col_hasnt_default('public', 'tax', 'rate', 'Column public.tax.rate should not have a default');

RETURN NEXT has_column(       'public', 'tax', 'minvalue', 'Column public.tax.minvalue should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'minvalue', 'numeric', 'Column public.tax.minvalue should be type numeric');
RETURN NEXT col_is_null(      'public', 'tax', 'minvalue', 'Column public.tax.minvalue should allow NULL');
RETURN NEXT col_hasnt_default('public', 'tax', 'minvalue', 'Column public.tax.minvalue should not have a default');

RETURN NEXT has_column(       'public', 'tax', 'maxvalue', 'Column public.tax.maxvalue should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'maxvalue', 'numeric', 'Column public.tax.maxvalue should be type numeric');
RETURN NEXT col_is_null(      'public', 'tax', 'maxvalue', 'Column public.tax.maxvalue should allow NULL');
RETURN NEXT col_hasnt_default('public', 'tax', 'maxvalue', 'Column public.tax.maxvalue should not have a default');

RETURN NEXT has_column(       'public', 'tax', 'taxnumber', 'Column public.tax.taxnumber should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'taxnumber', 'text', 'Column public.tax.taxnumber should be type text');
RETURN NEXT col_is_null(      'public', 'tax', 'taxnumber', 'Column public.tax.taxnumber should allow NULL');
RETURN NEXT col_hasnt_default('public', 'tax', 'taxnumber', 'Column public.tax.taxnumber should not have a default');

RETURN NEXT has_column(       'public', 'tax', 'validto', 'Column public.tax.validto should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'validto', 'timestamp without time zone', 'Column public.tax.validto should be type timestamp without time zone');
RETURN NEXT col_not_null(     'public', 'tax', 'validto', 'Column public.tax.validto should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'tax', 'validto', 'Column public.tax.validto shouldhave a default');
RETURN NEXT col_default_is(   'public', 'tax', 'validto', 'infinity'::timestamp without time zone, 'Column public.tax.validto default is');

RETURN NEXT has_column(       'public', 'tax', 'pass', 'Column public.tax.pass should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'pass', 'integer', 'Column public.tax.pass should be type integer');
RETURN NEXT col_not_null(     'public', 'tax', 'pass', 'Column public.tax.pass should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'tax', 'pass', 'Column public.tax.pass shouldhave a default');
RETURN NEXT col_default_is(   'public', 'tax', 'pass', '0', 'Column public.tax.pass default is');

RETURN NEXT has_column(       'public', 'tax', 'taxmodule_id', 'Column public.tax.taxmodule_id should exist');
RETURN NEXT col_type_is(      'public', 'tax', 'taxmodule_id', 'integer', 'Column public.tax.taxmodule_id should be type integer');
RETURN NEXT col_not_null(     'public', 'tax', 'taxmodule_id', 'Column public.tax.taxmodule_id should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'tax', 'taxmodule_id', 'Column public.tax.taxmodule_id shouldhave a default');
RETURN NEXT col_default_is(   'public', 'tax', 'taxmodule_id', '1', 'Column public.tax.taxmodule_id default is');

END;
$$ LANGUAGE plpgsql;