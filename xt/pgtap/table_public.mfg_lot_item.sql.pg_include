CREATE OR REPLACE FUNCTION lsmb_pgtap._table_public_mfg_lot_item()
RETURNS SETOF TEXT AS $$
BEGIN


RETURN NEXT has_table(
    'public', 'mfg_lot_item',
    'Should have table public.mfg_lot_item'
);

RETURN NEXT hasnt_pk(
    'public', 'mfg_lot_item',
    'Table public.mfg_lot_item should have a primary key'
);

RETURN NEXT columns_are('public'::name, 'mfg_lot_item'::name, ARRAY[
    'id'::name,
    'mfg_lot_id'::name,
    'parts_id'::name,
    'qty'::name
]);

RETURN NEXT has_column(       'public', 'mfg_lot_item', 'id', 'Column public.mfg_lot_item.id should exist');
RETURN NEXT col_type_is(      'public', 'mfg_lot_item', 'id', 'integer', 'Column public.mfg_lot_item.id should be type integer');
RETURN NEXT col_not_null(     'public', 'mfg_lot_item', 'id', 'Column public.mfg_lot_item.id should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'mfg_lot_item', 'id', 'Column public.mfg_lot_item.id shouldhave a default');
--SELECT col_default_is(   'public', 'mfg_lot_item', 'id', 'nextval(''mfg_lot_item_id_seq''::regclass)', 'Column public.mfg_lot_item.id default is');RETURN NEXT col_default_is(   'public', 'mfg_lot_item', 'id', 'nextval(''mfg_lot_item_id_seq''::regclass)', 'Column public.mfg_lot_item.id default is');

RETURN NEXT has_column(       'public', 'mfg_lot_item', 'mfg_lot_id', 'Column public.mfg_lot_item.mfg_lot_id should exist');
RETURN NEXT col_type_is(      'public', 'mfg_lot_item', 'mfg_lot_id', 'integer', 'Column public.mfg_lot_item.mfg_lot_id should be type integer');
RETURN NEXT col_not_null(     'public', 'mfg_lot_item', 'mfg_lot_id', 'Column public.mfg_lot_item.mfg_lot_id should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'mfg_lot_item', 'mfg_lot_id', 'Column public.mfg_lot_item.mfg_lot_id should not have a default');

RETURN NEXT has_column(       'public', 'mfg_lot_item', 'parts_id', 'Column public.mfg_lot_item.parts_id should exist');
RETURN NEXT col_type_is(      'public', 'mfg_lot_item', 'parts_id', 'integer', 'Column public.mfg_lot_item.parts_id should be type integer');
RETURN NEXT col_not_null(     'public', 'mfg_lot_item', 'parts_id', 'Column public.mfg_lot_item.parts_id should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'mfg_lot_item', 'parts_id', 'Column public.mfg_lot_item.parts_id should not have a default');

RETURN NEXT has_column(       'public', 'mfg_lot_item', 'qty', 'Column public.mfg_lot_item.qty should exist');
RETURN NEXT col_type_is(      'public', 'mfg_lot_item', 'qty', 'numeric', 'Column public.mfg_lot_item.qty should be type numeric');
RETURN NEXT col_not_null(     'public', 'mfg_lot_item', 'qty', 'Column public.mfg_lot_item.qty should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'mfg_lot_item', 'qty', 'Column public.mfg_lot_item.qty should not have a default');

END;
$$ LANGUAGE plpgsql;