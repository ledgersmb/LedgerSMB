CREATE OR REPLACE FUNCTION lsmb_pgtap._table_public_entity_note()
RETURNS SETOF TEXT AS $$
BEGIN


RETURN NEXT has_table(
    'public', 'entity_note',
    'Should have table public.entity_note'
);

RETURN NEXT has_pk(
    'public', 'entity_note',
    'Table public.entity_note should have a primary key'
);

RETURN NEXT columns_are('public'::name, 'entity_note'::name, ARRAY[
    'id'::name,
    'note_class'::name,
    'note'::name,
    'vector'::name,
    'created'::name,
    'created_by'::name,
    'ref_key'::name,
    'subject'::name,
    'entity_id'::name
]);

RETURN NEXT has_column(       'public', 'entity_note', 'id', 'Column public.entity_note.id should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'id', 'integer', 'Column public.entity_note.id should be type integer');
RETURN NEXT col_not_null(     'public', 'entity_note', 'id', 'Column public.entity_note.id should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'entity_note', 'id', 'Column public.entity_note.id shouldhave a default');
--SELECT col_default_is(   'public', 'entity_note', 'id', 'nextval(''note_id_seq''::regclass)', 'Column public.entity_note.id default is');RETURN NEXT col_default_is(   'public', 'entity_note', 'id', 'nextval(''note_id_seq''::regclass)', 'Column public.entity_note.id default is');

RETURN NEXT has_column(       'public', 'entity_note', 'note_class', 'Column public.entity_note.note_class should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'note_class', 'integer', 'Column public.entity_note.note_class should be type integer');
RETURN NEXT col_not_null(     'public', 'entity_note', 'note_class', 'Column public.entity_note.note_class should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'entity_note', 'note_class', 'Column public.entity_note.note_class should not have a default');

RETURN NEXT has_column(       'public', 'entity_note', 'note', 'Column public.entity_note.note should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'note', 'text', 'Column public.entity_note.note should be type text');
RETURN NEXT col_not_null(     'public', 'entity_note', 'note', 'Column public.entity_note.note should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'entity_note', 'note', 'Column public.entity_note.note should not have a default');

RETURN NEXT has_column(       'public', 'entity_note', 'vector', 'Column public.entity_note.vector should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'vector', 'tsvector', 'Column public.entity_note.vector should be type tsvector');
RETURN NEXT col_not_null(     'public', 'entity_note', 'vector', 'Column public.entity_note.vector should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'entity_note', 'vector', 'Column public.entity_note.vector shouldhave a default');
RETURN NEXT col_default_is(   'public', 'entity_note', 'vector', ''::tsvector, 'Column public.entity_note.vector default is');

RETURN NEXT has_column(       'public', 'entity_note', 'created', 'Column public.entity_note.created should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'created', 'timestamp without time zone', 'Column public.entity_note.created should be type timestamp without time zone');
RETURN NEXT col_not_null(     'public', 'entity_note', 'created', 'Column public.entity_note.created should be NOT NULL');
RETURN NEXT col_has_default(  'public', 'entity_note', 'created', 'Column public.entity_note.created shouldhave a default');
RETURN NEXT col_default_is(   'public', 'entity_note', 'created', 'now()', 'Column public.entity_note.created default is');

RETURN NEXT has_column(       'public', 'entity_note', 'created_by', 'Column public.entity_note.created_by should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'created_by', 'text', 'Column public.entity_note.created_by should be type text');
RETURN NEXT col_is_null(      'public', 'entity_note', 'created_by', 'Column public.entity_note.created_by should allow NULL');
RETURN NEXT col_has_default(  'public', 'entity_note', 'created_by', 'Column public.entity_note.created_by shouldhave a default');
RETURN NEXT col_default_is(   'public', 'entity_note', 'created_by', '"session_user"()', 'Column public.entity_note.created_by default is');

RETURN NEXT has_column(       'public', 'entity_note', 'ref_key', 'Column public.entity_note.ref_key should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'ref_key', 'integer', 'Column public.entity_note.ref_key should be type integer');
RETURN NEXT col_not_null(     'public', 'entity_note', 'ref_key', 'Column public.entity_note.ref_key should be NOT NULL');
RETURN NEXT col_hasnt_default('public', 'entity_note', 'ref_key', 'Column public.entity_note.ref_key should not have a default');

RETURN NEXT has_column(       'public', 'entity_note', 'subject', 'Column public.entity_note.subject should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'subject', 'text', 'Column public.entity_note.subject should be type text');
RETURN NEXT col_is_null(      'public', 'entity_note', 'subject', 'Column public.entity_note.subject should allow NULL');
RETURN NEXT col_hasnt_default('public', 'entity_note', 'subject', 'Column public.entity_note.subject should not have a default');

RETURN NEXT has_column(       'public', 'entity_note', 'entity_id', 'Column public.entity_note.entity_id should exist');
RETURN NEXT col_type_is(      'public', 'entity_note', 'entity_id', 'integer', 'Column public.entity_note.entity_id should be type integer');
RETURN NEXT col_is_null(      'public', 'entity_note', 'entity_id', 'Column public.entity_note.entity_id should allow NULL');
RETURN NEXT col_hasnt_default('public', 'entity_note', 'entity_id', 'Column public.entity_note.entity_id should not have a default');

END;
$$ LANGUAGE plpgsql;