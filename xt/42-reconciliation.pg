BEGIN;

    -- Standard prologue according to pgTap documentation

    \set ECHO 'none'
    \set QUIET 1
    \pset format unaligned
    \pset tuples_only true
    \pset pager
    \set ON_ERROR_ROLLBACK 1
    \set ON_ERROR_STOP true

    -- Load the TAP functions.

    CREATE EXTENSION pgtap;

    -- Add data

    \i sql/modules/test/Base.sql
    \i sql/modules/test/data/Reconciliation.sql

    CREATE SCHEMA lsmb_pgtap;

    -- Validate required tables

    \ir pgtap/table_public.acc_trans.sql.pg_include
    \ir pgtap/table_public.account.sql.pg_include
    \ir pgtap/table_public.ap.sql.pg_include
    \ir pgtap/table_public.ar.sql.pg_include
    \ir pgtap/table_public.cr_coa_to_account.sql.pg_include
    \ir pgtap/table_public.cr_report.sql.pg_include
    \ir pgtap/table_public.cr_report_line.sql.pg_include
    \ir pgtap/table_public.entity.sql.pg_include
    \ir pgtap/table_public.transactions.sql.pg_include

    CREATE OR REPLACE FUNCTION lsmb_pgtap.startup_reconciliation_test()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT results_eq('SELECT setval(''cr_report_id_seq'',1)::int',ARRAY[1],'Initialize Sequence');
    END;
    $$ LANGUAGE plpgsql;

    -- Validate required view

    CREATE OR REPLACE FUNCTION lsmb_pgtap.reconciliation_test1_views()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT has_view('public','recon_payee','View recon_payee exists');
    END;
    $$ LANGUAGE plpgsql;

    -- Validate required triggers

    CREATE OR REPLACE FUNCTION lsmb_pgtap.reconciliation_test1_triggers()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT has_trigger('cr_report','block_change_when_approved');
    END;
    $$ LANGUAGE plpgsql;

    -- Validate required functions

    CREATE OR REPLACE FUNCTION lsmb_pgtap.reconciliation_test1_functions()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT has_function('cr_report_block_changing_approved',ARRAY['']);
        RETURN NEXT has_function('reconciliation__account_list',ARRAY['']);
        RETURN NEXT has_function('reconciliation__add_entry',array['integer', 'text', 'text', 'timestamp without time zone', 'numeric']);
        RETURN NEXT has_function('reconciliation__check',array['date', 'integer']);
        RETURN NEXT has_function('reconciliation__delete_my_report',array['integer']);
        RETURN NEXT has_function('reconciliation__delete_unapproved',array['integer']);
        RETURN NEXT has_function('reconciliation__get_cleared_balance',array['integer', 'date']);
        RETURN NEXT has_function('reconciliation__get_current_balance',array['integer', 'date']);
        RETURN NEXT has_function('reconciliation__new_report_id',array['integer', 'numeric', 'date', 'boolean']);
        RETURN NEXT has_function('reconciliation__pending_transactions',array['integer', 'numeric']);
        RETURN NEXT has_function('reconciliation__previous_report_date',ARRAY['integer','date']);
        RETURN NEXT has_function('reconciliation__reject_set',array['integer']);
        RETURN NEXT has_function('reconciliation__report_approve',array['integer']);
        RETURN NEXT has_function('reconciliation__report_details',array['integer']);
        RETURN NEXT has_function('reconciliation__report_details_payee',array['integer']);
        RETURN NEXT has_function('reconciliation__report_details_payee_with_days',array['integer', 'date']);
        RETURN NEXT has_function('reconciliation__report_summary',array['integer']);
        RETURN NEXT has_function('reconciliation__save_set',array['integer', 'integer[]']);
        RETURN NEXT has_function('reconciliation__search',array['date', 'date', 'numeric', 'numeric', 'integer', 'boolean', 'boolean']);
        RETURN NEXT has_function('reconciliation__submit_set',array['integer', 'integer[]']);
    END;
    $$ LANGUAGE plpgsql;

    -- Prepare tests

    CREATE OR REPLACE FUNCTION lsmb_pgtap.reconciliation_test2_report2()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT results_eq('SELECT currval(''cr_report_id_seq'')::int',ARRAY[1],'Initialize Test for empty report');

        PREPARE test AS SELECT COUNT(*)::INT FROM acc_trans
                        WHERE cleared
                        AND entry_id NOT IN (SELECT ledger_id FROM cr_report_line);
        RETURN NEXT results_eq('test', Array[4], 'Transactions that should be in cr_report');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__previous_report_date(test_get_account_id('-11111'), now()::date);
        RETURN NEXT results_eq('test', ARRAY[]::cr_report[], 'No previous report');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11111'), 100, '1000-01-01', false);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int+1], 'Create Recon Report');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__delete_my_report(currval('cr_report_id_seq')::int);
        RETURN NEXT results_eq('test',ARRAY[true],'Delete Recon Report');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__previous_report_date(test_get_account_id('-11111'), now()::date);
        RETURN NEXT results_eq('test', ARRAY[]::cr_report[], 'Deleted previous report doesn''t show up');
        DEALLOCATE test;
    END;
    $$ LANGUAGE plpgsql;

    CREATE OR REPLACE FUNCTION lsmb_pgtap.reconciliation_test2_report3()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT results_eq('SELECT currval(''cr_report_id_seq'')::int',ARRAY[2],'Initialize Test for unsubmitable report');

        PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11111'), 100, '1001-01-01', false);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int+1], 'Create Recon Report');
        DEALLOCATE test;

        --TODO: Shouldn't reconciliation__pending_transactions returns the
        --      number of transactions ran instead of the report number?
        PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int], 'Pending Transactions Ran');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',Array[10],'Correct number of transactions');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE scn LIKE '% gl %'
                          AND report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test', ARRAY[3], 'Correct number of GL groups');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',ARRAY[10],'Correct number of report lines');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int,
                        (SELECT as_array(id::int)
                           FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int));
        RETURN NEXT results_eq('test',ARRAY[true],'Report Submitted');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__previous_report_date(test_get_account_id('-11111'), '1001-01-01');
        RETURN NEXT results_eq('test', ARRAY[]::cr_report[], 'No previous report before 1001-01-01');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__report_approve(currval('cr_report_id_seq')::int);
        RETURN NEXT results_eq('test',ARRAY[1],'Report Approved');
        DEALLOCATE test;

        PREPARE test AS SELECT end_date FROM reconciliation__previous_report_date(test_get_account_id('-11111'), '1001-01-02');
        RETURN NEXT results_eq('test', ARRAY['1001-01-01']::date[], 'One previous report at 1001-01-01');
        DEALLOCATE test;

        PREPARE test as SELECT count(*)::int
                          FROM acc_trans
                          JOIN account a ON (acc_trans.chart_id = a.id)
                          WHERE a.accno = '-11111'
                          AND NOT cleared;
        RETURN NEXT results_eq('test',ARRAY[2],'1 Transactions closed');
        DEALLOCATE test;
    END;
    $$ LANGUAGE plpgsql;

    CREATE OR REPLACE FUNCTION lsmb_pgtap.reconciliation_test2_report4()
    RETURNS SETOF TEXT AS $$
    BEGIN
        RETURN NEXT results_eq('SELECT currval(''cr_report_id_seq'')::int',ARRAY[3],'Initialize Test Balanced submit and approve');

        PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11112'), 100, now()::date, false);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int+1], 'Create Recon Report');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int], 'Pending Transactions Ran');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',ARRAY[10],'Correct number of transactions 2');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int], 'Pending Transactions Ran');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',ARRAY[10],'Correct number of transactions 3');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE scn like '% gl %'
                          AND report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',ARRAY[3],'Correct number of GL groups');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',ARRAY[10],'Correct number of report lines');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int, '{}');
        RETURN NEXT results_eq('test',ARRAY[true],'1 Report Submitted');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112'));
        RETURN NEXT results_eq('test',ARRAY[-10.],'Cleared balance pre-approval is -10');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__report_approve(currval('cr_report_id_seq')::int) = 1;
        RETURN NEXT results_eq('test',ARRAY[true],'Report Approved');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM acc_trans
                          JOIN account ON (acc_trans.chart_id = account.id)
                          WHERE accno = '-11112'
                          AND NOT cleared;
        RETURN NEXT results_eq('test',ARRAY[14],'Transactions open');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112'));
        RETURN NEXT results_eq('test',ARRAY[-10.],'Cleared balance post-approval is -10');
        DEALLOCATE test;

        RETURN NEXT results_eq('SELECT currval(''cr_report_id_seq'')::int',ARRAY[4],'Initialize Delete report');

        PREPARE test AS SELECT reconciliation__new_report_id(test_get_account_id('-11112'), 100, now()::date, false);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int+1],'Create Recon Report');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__pending_transactions(currval('cr_report_id_seq')::int, 110);
        RETURN NEXT results_eq('test', ARRAY[currval('cr_report_id_seq')::int],'Pending Transactions Ran');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int;
        RETURN NEXT results_eq('test',ARRAY[10],'Correct number of transactions');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__submit_set(currval('cr_report_id_seq')::int, (select as_array(id::int)
                          FROM cr_report_line
                          WHERE report_id = currval('cr_report_id_seq')::int));
        RETURN NEXT results_eq('test',ARRAY[true],'Report Submitted');
        DEALLOCATE test;

        PREPARE test AS SELECT their_total::int
                          FROM reconciliation__report_summary(currval('cr_report_id_seq')::int);
        RETURN NEXT results_eq('test',ARRAY[110],'Their Balance Updated');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112'));
        RETURN NEXT results_eq('test',ARRAY[-10.],'Cleared balance pre-approval is 0');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__report_approve(currval('cr_report_id_seq')::int) = 1;
        RETURN NEXT results_eq('test',ARRAY[true],'Report Approved');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__delete_my_report(currval('cr_report_id_seq')::int) IS NULL;
        -- Should we thrown an exception?
        RETURN NEXT results_eq('test',ARRAY[true],'Cannot Delete Approved Recon Report');
        DEALLOCATE test;

        PREPARE test AS SELECT count(*)::int
                          FROM acc_trans
                          JOIN account a ON (acc_trans.chart_id = a.id)
                          WHERE accno = '-11112'
                          AND NOT cleared;
        RETURN NEXT results_eq('test',ARRAY[2],'Transactions closed');
        DEALLOCATE test;

        PREPARE test AS SELECT reconciliation__get_cleared_balance(test_get_account_id('-11112'));
        RETURN NEXT results_eq('test',ARRAY[-130.],'Cleared balance post-approval is 130');
        DEALLOCATE test;
    END;
    $$ LANGUAGE plpgsql;

    -- Run all tests
    SELECT * FROM runtests('lsmb_pgtap','^(_table_*|reconciliation_test*)');

ROLLBACK;
