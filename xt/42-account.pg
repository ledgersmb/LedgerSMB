BEGIN;
    -- Load the TAP functions.
    CREATE EXTENSION pgtap;

    -- Plan the tests.

    SELECT plan(51);

    -- Add data

    \i sql/modules/test/Base.sql

    -- Validate required tables

    SELECT has_table('account_heading');
    SELECT has_table('account');
    SELECT has_table('account_checkpoint');
    SELECT has_table('account_link_description');
    SELECT has_table('account_link');
    SELECT has_table('account_translation');
    SELECT has_table('account_heading_translation');

    -- Validate required functions

    SELECT has_function('account__all_headings');
    SELECT has_function('account__delete');
    SELECT has_function('account__delete_translation');
    SELECT has_function('account__get_by_link_desc');
    SELECT has_function('account__get_from_accno');
    SELECT has_function('account_get');
    SELECT has_function('account__get_taxes');
    SELECT has_function('account_has_transactions');
    SELECT has_function('account_heading__check_tree');
    SELECT has_function('account_heading__delete');
    SELECT has_function('account_heading__delete_translation');
    SELECT has_function('account_heading_get');
    SELECT has_function('account_heading__list');
    SELECT has_function('account_heading_list');
    SELECT has_function('account_heading__list_translations');
    SELECT has_function('account_heading_save');
    SELECT has_function('account_heading__save_translation');
    SELECT has_function('account__is_recon');
    SELECT has_function('account__list_by_heading');
    SELECT has_function('account__list_translations');
    SELECT has_function('account__save');
    SELECT has_function('account__save_tax');
    SELECT has_function('account__save_translation');
    SELECT has_function('chart_get_ar_ap');
    SELECT has_function('chart_list_all');
    SELECT has_function('chart_list_cash');
    SELECT has_function('chart_list_discount');
    SELECT has_function('chart_list_overpayment');
    SELECT has_function('chart_list_search');
    SELECT has_function('cr_coa_to_account_save');
    SELECT has_function('get_link_descriptions');
    SELECT has_function('gifi__list');
    SELECT has_function('report__coa');
    SELECT has_function('report_trial_balance');

    -- Prepare specific data

    CREATE OR REPLACE FUNCTION test_account_link_description(d text, s boolean, c boolean)
    RETURNS void AS $$
    BEGIN
       INSERT INTO account_link_description(description, summary, custom) VALUES (d, s, c);
       SELECT is( description, d, 'Should have decription') FROM account_link_description WHERE description = d;
       SELECT is( summary, s, 'Should have summary')        FROM account_link_description WHERE summary = s;
       SELECT is( custom, c, 'Should have custom')          FROM account_link_description WHERE custom = c;
    END $$ LANGUAGE plpgsql;

    PERFORM test_account_link_description('AR_paid1', false, true);
    PERFORM test_account_link_description('AP_paid1', false, true);
    PERFORM test_account_link_description('AR_p', false, true);
    PERFORM test_account_link_description('AP_p', false, true);
    PERFORM test_account_link_description('AR_overp', false, true);
    PERFORM test_account_link_description('AP_overpayment1', false, true);
    PERFORM test_account_link_description('AP_overp', false, true);
    PERFORM test_account_link_description('AR_overpayment1', false, true);

    SELECT account__save (null, accno, description, category::char(1),
                null, null, false, false,
                case when link is not null then link::text[] else '{}' END,
                false, false)
      FROM (VALUES ('TEST testing 1', 'A', 'A', '00001', null),
                   ('TEST testing 2', 'A', 'A', '00002', null),
                   ('TEST AP 1', 'A', 'L', '00003', '{AP}'),
                   ('TEST AP 2', 'A', 'L', '00004', '{AP}'),
                   ('TEST AR 1', 'A', 'A', '00005', '{AR}'),
                   ('TEST AR 2', 'A', 'A', '00006', '{AR}'),
                   ('TEST AR PAID 1', 'A', 'A', '00007', '{AR_paid}'),
                   ('TEST AR PAID 2', 'A', 'A', '00008', '{AR_paid1}'),
                   ('TEST AR PAID 3', 'A', 'A', '00009', '{IC_tax,AR_paid}'),
                   ('TEST AR PAID 4 INVALID', 'A', 'A', '00010', '{AR_p}'),
                   ('TEST AP PAID 1', 'A', 'A', '00011', '{AP_paid}'),
                   ('TEST AP PAID 2', 'A', 'A', '00012', '{AP_paid1}'),
                   ('TEST AP PAID 3', 'A', 'A', '00013', '{IC_tax,AP_paid}'),
                   ('TEST AP PAID 4 INVALID', 'A', 'A', '00014', '{AP_p}'),
                   ('TEST AP Overpayment 1', 'A', 'A', '00015', '{AP_overpayment}'),
                   ('TEST AP Overpayment 2', 'A', 'A', '00016', '{AP_overpayment1}'),
                   ('TEST AP Overpayment 3', 'A', 'A', '00017', '{IC_tax,AP_overpayment}'),
                   ('TEST AP Overpayment 4 INVALID', 'A', 'A', '00018', '{AP_overp}'),
                   ('TEST AP Overpayment 1', 'A', 'A', '00019', '{AR_overpayment}'),
                   ('TEST AP Overpayment 2', 'A', 'A', '00020', '{AR_overpayment1}'),
                   ('TEST AP Overpayment 3', 'A', 'A', '00021', '{IC_tax,AR_overpayment}'),
                   ('TEST AP Overpayment 4 INVALID', 'A', 'A', '00022', '{AR_overp}')
           ) f (description, charttype, category, accno, link);

--psql:xt/42-account.pg:98: ERROR:  insert or update on table "account_link" violates foreign key constraint "account_link_description_fkey"
--DETAIL:  Key (description)=(AR_paid1) is not present in table "account_link_description".
--CONTEXT:  SQL statement "INSERT INTO account_link (account_id, description)
--                VALUES (t_id, t_link.val)"

    INSERT INTO entity_credit_account (id, meta_number, entity_id, entity_class, ar_ap_account_id)
    values (-100, 'test1', -100, 1, -1000);

    INSERT INTO ap (invnumber, netamount, amount, entity_credit_account, id, curr)
    VALUES ('TEST', '0', '0', -100, -100, 'USD');
    INSERT INTO acc_trans (trans_id, chart_id, amount)
    VALUES (-100, (select id from account where accno = '00002'), '0');

    -- Run tests

    PREPARE test AS SELECT currval('account_id_seq') IS NOT NULL;
    SELECT results_eq('test',ARRAY[true],'Accounts created');
    DEALLOCATE test;

    PREPARE test AS SELECT account_has_transactions(
                            (SELECT id FROM account WHERE description = 'TEST testing 1')
                           ) IS FALSE;
    SELECT results_eq('test',ARRAY[true],'Chart 1 is orphaned');
    DEALLOCATE test;

    PREPARE test AS SELECT account_has_transactions(
                            (SELECT id FROM account WHERE accno = '00002')
                           ) IS TRUE;
    SELECT results_eq('test',ARRAY[true],'Chart 2 is not orphaned');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 22 FROM chart_list_all()
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'All Test Accounts Exist');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2 FROM chart_list_cash(2)
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'List AR Cash Test Accounts');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2 FROM chart_list_cash(1)
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'List AP Cash Test Accounts');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2 FROM chart_list_overpayment(1)
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'List AP Overpayment Accts');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2 FROM chart_list_overpayment(2)
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'List AR Overpayment Accts');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2 FROM chart_get_ar_ap(1)
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'Test AP Accounts Are Found');
    DEALLOCATE test;

    PREPARE test AS SELECT count(*) = 2 FROM chart_get_ar_ap(2)
                    WHERE accno LIKE '0%' AND description LIKE 'TEST%';
    SELECT results_eq('test',ARRAY[true],'Test AR Accounts Are Found');
    DEALLOCATE test;

    -- Finish the tests and clean up.
    SELECT * FROM finish();

ROLLBACK;
