version: 2.1

# Define defaults
_defaults: &defaults
    # Make sure that .profile is sourced to local::lib
    shell: /bin/bash --login -eo pipefail

# Define aliases for simplification
aliases:
  - &store_artifacts
    store_artifacts:
      path: /tmp/artifact/

# Reuseable commands
commands:
  prove:
    steps:
      - run:
          command: |
            JOB_COUNT=5
            if [ "x$COVERAGE" == "x1" ]
            then
              export PERL5OPT="$PERL5OPT -MDevel::Cover=$DEVEL_COVER_OPTIONS"
              JOB_COUNT=2
            fi
            yath start --job-count $JOB_COUNT --event-timeout 1800 # Timeout after 30 min
            yath --color --no-progress --retry=2 \
              --pgtap-dbname=$PGDB --pgtap-username=$PGUSER \
              --pgtap-psql=.circleci/psql-wrap \
              --Feature-tags=~@wip \
              t xt
            yath stop
      - run:
          command: |
            while [ $(pidof plackup) ];
            do
              kill -SIGTERM `pidof plackup`
              echo -n "."
              sleep 5
            done
            echo " done"

      - run:
          name: Plot monitoring graph & save artefacts
          command: |
            gnuplot -e "filename='logs/${MONITOR_FILE}.txt';outputfile='screens/${MONITOR_FILE}.png'" \
                    utils/test/monitor.gnuplot || true
            mkdir -p /tmp/artifact/logs;
            mkdir -p /tmp/artifact/screens;
            cp logs/* /tmp/artifact/logs || true;
            cp screens/* /tmp/artifact/screens || true;
          when: always

      - run:
          name: Upload coverage data
          command: |
            if [ "x$COVERAGE" == "x1" ];
            then
              cover -report coveralls
              cover -report text > /tmp/artifact/coverage.txt
            fi

      - *store_artifacts

  prep_env:
    parameters:
      perl:
        type: string
    description: "Prepare environment"
    steps:

      - run:
          name: "Monitor CPU & MEMORY"
          command: |
            ./utils/test/monitor_rss.sh logs/${MONITOR_FILE}.txt
          background: true

      - checkout

      - run:
          # TODO: Update the CircleCI dev images instead
          name: Update NodeJS to 15.x
          command: |
            curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
            sudo apt-get install -y nodejs

      # Restore node_modules
      - restore_cache:
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v1-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-

      - run:
          name: Make Dojo
          command: |
            make dojo

      - save_cache:
          key: v1-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - run:
          name: Set up dirs and files
          command: |
            mkdir -p logs screens
            # these commands are in start.sh of the Perl container too:
            cp doc/conf/ledgersmb.conf.default ledgersmb.conf
            sed -i \
                -e "s/\(cache_templates = \).*\$/cache_templates = 1/g" \
                -e "s/\(host = \).*\$/\1$POSTGRES_HOST/g" \
                -e "s/\(port = \).*\$/\1$POSTGRES_PORT/g" \
                -e "s/\(default_db = \).*\$/\1$DEFAULT_DB/g" \
                -e "s%\(sendmail   = \).*%#\1/usr/sbin/ssmtp%g" \
                -e "s/# \(smtphost = \).*\$/\1mailhog:1025/g" \
                -e "s/# \(backup_email_from = \).*\$/\1lsmb-backups@example.com/g" \
                -e "s/#dojo_built = 1/dojo_built = 0/" \
              ledgersmb.conf

      # Freshen up CPAN
      - restore_cache:
          keys:
            # Get latest cache for the current specs
            - v2-cpm-<< parameters.perl >>-{{ .Branch }}-{{ checksum "cpanfile" }}
            # Fall back to the latest for the current branch
            - v2-cpm-<< parameters.perl >>-{{ .Branch }}-
            # Fall back to the latest for master
            - v2-cpm-<< parameters.perl >>-master-
            # Don't fall back any further

      - run:
          name: Refresh modules from CPAN
          command: |
            cpm install --local-lib-contained=$HOME/perl5 --no-test \
              --resolver=metacpan \
              --with-develop \
              --feature=starman \
              --feature=latex-pdf-ps \
              --feature=openoffice \
              --feature=xls \
              --feature=edi
            cpm install --local-lib-contained=$HOME/perl5 --no-test \
              --resolver=metacpan \
                JSON::PP~4.03 Gazelle
            if [ "x$COVERAGE" == "x1" ]
            then
              cpm install --local-lib-contained=$HOME/perl5 --no-test \
                  --resolver=metacpan \
                  Devel::Cover \
                  Devel::Cover::Report::Coveralls
            fi
            rm -rf $HOME/.perl-cpm

      - save_cache:
           key: v2-cpm-<< parameters.perl >>-{{ .Branch }}-{{ checksum "cpanfile" }}
           paths:
             - $HOME/perl5

      - run:
          name: Create test database
          command: |
            PERL5LIB="lib:$HOME/perl5/lib/perl5" \
              ./bin/ledgersmb-admin create $PGUSER@$PGHOST/$PGDB

      - run:
          name: Set up host IP & BASE variables
          command: |
            echo "HOST_IP=$(hostname -I |awk '{print $1}')" > $BASH_ENV
            echo "export LSMB_BASE_URL=http://\$HOST_IP:5000" >> $BASH_ENV
            echo "export PSGI_BASE_URL=http://\$HOST_IP:5762" >> $BASH_ENV

  start_plackup:
    description: "Start plackup"
    steps:
      - run:
          command: |
            JOB_COUNT=5
            source $BASH_ENV
            if [ "x$COVERAGE" == "x1" ]
            then
              export PERL5OPT="$PERL5OPT -MDevel::Cover=$DEVEL_COVER_OPTIONS"
              JOB_COUNT=2
            fi
            starman --preload-app --pid starman.pid --workers $JOB_COUNT \
                  --max-requests 5000 --error-log logs/starman-error.log \
                  -Ilib -Iold/lib --port 5762 bin/ledgersmb-server.psgi
            echo "Plackup done!"
            touch plackup-done
          background: true

  start_proxy:
    description: "Start the proxy"
    parameters:
      proxy:
        type: string
        default: nginx
    steps:
      - run:
          command: |
            /usr/local/bin/<< parameters.proxy >>.sh
          background: true

# Define executors
executors:
  test:
    parameters:
      perl:
        type: string
        default: latest
      postgres:
        type: string
        default: latest
      browser:
        type: string
        default: chrome
      hub:
        type: string
        default: selenium/hub
      selenium:
        type: string
        default: selenium/node-chrome
      coverage:
        type: integer
        default: 0
    docker:
      - image: ledgersmb/ledgersmb_circleci-perl:<< parameters.perl >>
      - image: ledgersmb/ledgersmb_circleci-postgres:<< parameters.postgres >>
        environment:
          POSTGRES_PASSWORD: test
      - image: << parameters.hub >>
        name: selenium-hub
        environment:
          GRID_DEBUG: "true"
          GRID_HUB_PORT: 4422
          GRID_MAX_SESSION: 100
      - image: << parameters.selenium >>
        environment:
          GRID_DEBUG: "true"
          HUB_HOST: selenium-hub
          HUB_PORT: 4422
          NODE_MAX_SESSION: 5
          NODE_MAX_INSTANCES: 5
    environment:
      BROWSER: << parameters.browser >>
      COVERAGE: << parameters.coverage >>
      DEVEL_COVER_OPTIONS: -silent,1,+ignore,^x?t/,+ignore,^utils/,+ignore,\.lttc$,+ignore,^/usr/,+ignore,/home/circleci/perl5,+ignore,plackup$
      HARNESS_RULESFILE: t/testrules.yml
      LSMB_BASE_URL: http://127.0.0.1:5000
      LSMB_NEW_DB: lsmb_test
      LSMB_TEST_DB: 1
      MONITOR_FILE: cpu-memory-usage
      PGDB: lsmb_test
      PGHOST: localhost
      PGPASSWORD: test
      PGUSER: postgres
      PSGI_BASE_URL: http://127.0.0.1:5762
      RELEASE_TESTING: 1
      REMOTE_SERVER_ADDR: selenium-hub

# Define jobs
jobs:
  test_webpack_chrome:
    <<: *defaults
    executor:
      name: test
      perl: '5.32'
      postgres: '11'
      browser: chrome
      selenium: selenium/node-chrome
    steps:
      - prep_env:
          perl: '5.32'
      - start_plackup
      - start_proxy
      - prove

  test_webpack_firefox:
    <<: *defaults
    executor:
      name: test
      perl: '5.30'
      postgres: '11'
      browser: firefox
      selenium: selenium/node-firefox
    steps:
      - prep_env:
          perl: '5.30'
      - start_plackup
      - start_proxy
      - prove
    environment:
      COA_TESTING: 1

  test_webpack_opera:
    <<: *defaults
    executor:
      name: test
      perl: '5.28'
      postgres: '11'
      browser: operablink
      selenium: selenium/node-opera
    steps:
      - prep_env:
          perl: '5.28'
      - start_plackup
      - start_proxy
      - prove
    environment:
      DB_TESTING: 1

  test_webpack_phantomjs:
    <<: *defaults
    executor:
      name: test
      perl: '5.32'
      postgres: '11'
      browser: phantomjs
      hub: ledgersmb/ledgersmb_circleci-phantomjs
      selenium: rwgrim/docker-noop
      coverage: 1
    steps:
      - prep_env:
          perl: '5.28'
      - start_plackup
      - start_proxy
      - prove

# Workflows
# Tests multiple browsers, coverage and dojo
_filters: &_filters
  branches:
    ignore:
      - /1\.2\..*/
      - /1\.3\..*/
      - /1\.4\..*/
      - /1\.5\..*/
      - /1\.6\..*/

workflows:
  workflow:
    jobs:
      - test_webpack_chrome:
          filters: *_filters

      - test_webpack_firefox:
          filters: *_filters

      - test_webpack_opera:
          filters: *_filters

      - test_webpack_phantomjs:
          filters: *_filters
